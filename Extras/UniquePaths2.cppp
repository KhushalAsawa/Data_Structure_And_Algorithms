/* A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid.
Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.
Note: m and n will be at most 100. */

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size();
        if(n==0)
            return 0;
        int m=obstacleGrid[0].size();
        vector<vector<int>> dp(n, vector<int>(m, 0));
        dp[0][0]=1;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(obstacleGrid[i][j]==1){
                    dp[i][j]=-1;
                    continue;
                }
                if(i==0 && j>0){
                    if(dp[i][j-1]!=-1)
                        dp[i][j]=1;
                    else
                        dp[i][j]=-1;
                }
                if(j==0 && i>0){
                    if(dp[i-1][j]!=-1)
                        dp[i][j]=1;
                    else    
                        dp[i][j]=-1;
                }
                if(i>0 && j>0){
                    if(dp[i-1][j]!=-1 || dp[i][j-1]!=-1){
                        if(dp[i-1][j]!=-1)
                            dp[i][j]+=dp[i-1][j];
                        if(dp[i][j-1]!=-1)
                            dp[i][j]+=dp[i][j-1];
                    } else {
                        dp[i][j]=-1;
                    }
                }
            }
        }
        return dp[n-1][m-1]!=-1?dp[n-1][m-1]:0;
    }
};
